// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.foamtec.fa.domain;

import com.foamtec.fa.domain.FirstArticle;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect FirstArticle_Roo_Jpa_ActiveRecord {
    
    public static final List<String> FirstArticle.fieldNames4OrderClauseFilter = java.util.Arrays.asList("createBy", "customer", "needDate", "partNumber", "amount", "material1", "material2", "material3", "reportType", "engineerReviewBy", "drawingReview", "mouldRequest", "mouldDate", "engineerStatus", "qcReviewBy", "dimensionReview", "document", "specDoc", "rohsDoc", "msdsDoc", "hfDoc", "qcStatus", "workFlow");
    
    public static long FirstArticle.countFirstArticles() {
        return entityManager().createQuery("SELECT COUNT(o) FROM FirstArticle o", Long.class).getSingleResult();
    }
    
    public static List<FirstArticle> FirstArticle.findAllFirstArticles() {
        return entityManager().createQuery("SELECT o FROM FirstArticle o", FirstArticle.class).getResultList();
    }
    
    public static List<FirstArticle> FirstArticle.findAllFirstArticles(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM FirstArticle o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, FirstArticle.class).getResultList();
    }
    
    public static FirstArticle FirstArticle.findFirstArticle(Long id) {
        if (id == null) return null;
        return entityManager().find(FirstArticle.class, id);
    }
    
    public static List<FirstArticle> FirstArticle.findFirstArticleEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM FirstArticle o", FirstArticle.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<FirstArticle> FirstArticle.findFirstArticleEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM FirstArticle o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, FirstArticle.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public FirstArticle FirstArticle.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        FirstArticle merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
